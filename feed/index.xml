<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Leo's Wiki</title><link>/</link><description>THIS IS MY STORY.</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/logo.png</url><title>Leo's Wiki</title><link>/</link></image><language>zh-CN</language><lastBuildDate>Sun, 16 Aug 2020 11:57:16 +0806</lastBuildDate><pubDate>Sun, 16 Aug 2020 11:57:16 +0806</pubDate><item><title>Hello World!</title><link>/archives/typography/</link><description>&lt;div class="notice"&gt;这是一篇示例文章，在这里你可以看到常用页面元素的显示效果，同时也是 Markdown 语法的参考文章。保留或者删除本文，开始自己的创作吧！&lt;/div&gt;&lt;h2&gt;L2 Heading&lt;/h2&gt;
&lt;h3&gt;L3 Heading&lt;/h3&gt;
&lt;h4&gt;L4 Heading&lt;/h4&gt;
&lt;h5&gt;L5 Heading&lt;/h5&gt;
&lt;h6&gt;L6 Heading&lt;/h6&gt;
&lt;h2&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;We are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.&lt;/p&gt;
&lt;p&gt;We are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.&lt;/p&gt;
&lt;h2&gt;Inline elements&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;, &lt;ruby&gt;Ruby&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;ルビ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;, &lt;em&gt;Italic&lt;/em&gt;, &lt;del&gt;Strikethrough&lt;/del&gt;, &lt;a href="https://www.imalan.cn"&gt;Link&lt;/a&gt;&lt;sup id="fn_ref_1"&gt;&lt;a href="#fn_1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2&gt;Blockquote and nested blockquote&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;安得广厦千万间，大庇天下寒士俱欢颜！风雨不动安如山。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;int a=1;&lt;/code&gt;. Code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;List&lt;/h2&gt;
&lt;h3&gt;Unordered List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iPhone&lt;ul&gt;
&lt;li&gt;iPhone X&lt;/li&gt;
&lt;li&gt;iPhone 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iPad&lt;/li&gt;
&lt;li&gt;MacBook&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ordered List&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打开冰箱&lt;ol&gt;
&lt;li&gt;右手放在冰箱门拉手上&lt;/li&gt;
&lt;li&gt;左手扶住冰箱主体&lt;/li&gt;
&lt;li&gt;右手向后用力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;把大象放进冰箱&lt;/li&gt;
&lt;li&gt;关上冰箱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Horizontal rule&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Inline Math: $m\times n$, math block:&lt;/p&gt;
&lt;p&gt;$$C_{m\times k}=A_{m\times n}\cdot B_{n\times k}$$&lt;/p&gt;
&lt;h2&gt;Figures&lt;/h2&gt;
&lt;h3&gt;Single figure&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="836" data-height="450" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/e0affbc80ccb2d596c87b520e37e7071.jpg" alt="Princess Mononoke" /&gt;&lt;figcaption&gt;Princess Mononoke&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Photoset&lt;/h3&gt;
&lt;div class="photos"&gt;
&lt;figure&gt;&lt;img data-width="4032" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/4956a144888cdbbb6c2df1d1d15384b0.jpeg" alt="" /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img data-width="2690" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/4c66f0da616b08325b3aaa4c8b3f68e1.jpg" alt="" /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img data-width="4032" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/8b4d2334469ffa39b59e6fdb37c8c601.jpeg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class="photos"&gt;
&lt;figure&gt;&lt;img data-width="4032" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/0f5023d542a33e7c9d270f3cd6a99562.jpeg" alt="" /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img data-width="4032" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/20ec69d2a0276336f95e11f42866d17f.jpeg" alt="" /&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img data-width="4032" data-height="2688" src="https://cdn.jsdelivr.net/gh/LeoCreate/LeoWiki@gh-pages/archives/assets/2b8af25285e5a193729a350593113bad.jpeg" alt="" /&gt;&lt;/figure&gt;&lt;/div&gt;&lt;h2&gt;Table&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;th&gt;header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cell 1&lt;/td&gt;
&lt;td&gt;cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cell 3&lt;/td&gt;
&lt;td&gt;cell 4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Link Card&lt;/h2&gt;
&lt;div class="links"&gt;
&lt;a style="display:block" target="_blank" href="https://www.imalan.cn" class="board-item"&gt;                 &lt;div class="board-thumb"&gt;&lt;img src="https://secure.gravatar.com/avatar/1741a6eef5c824899e347e4afcbaa75d?s=200&amp;r=G&amp;d="&gt;&lt;/div&gt;                 &lt;div class="board-title"&gt;AlanDecode&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;&lt;div class="footnotes"&gt;&lt;ol&gt;&lt;li id="fn_1"&gt;Home page for AlanDecode &lt;a no-style href="#fn_ref_1"&gt;↩&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><author>1193886304@qq.com (AlanDecode)</author><guid isPermaLink="true">/archives/typography/</guid><pubDate>Wed, 18 Dec 2019 16:50:00 +0806</pubDate></item><item><title>如何在电脑上使用 Git</title><link>/archives/How-to-use-git-on-a-computer/</link><description>&lt;h1&gt;设置/安装 Git&lt;/h1&gt;
&lt;p&gt;如果你之前没有使用过 GitHub，那么需要进行一定的设置。
如果你的电脑是 macOS 或者 Linux，git 可能是默认安装在电脑上的
如果是 Windows，则需要到&lt;a href="https://git-scm.com/downloads"&gt;这里&lt;/a&gt;下载合适的 Git 安装到电脑上。记得安装时选中将  git 添加到 PATH。&lt;/p&gt;
&lt;h1&gt;登录 Git&lt;/h1&gt;
&lt;p&gt;文件管理器中右键，点击 Git Bash Here，在弹出的窗口中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name "你的GitHub用户名"
git config --global user.email "你的GitHub邮箱"
git config --global credential.helper store&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;克隆仓库&lt;/h1&gt;
&lt;p&gt;之后到仓库右上角的 Clone or download 那里，复制仓库链接（建议使用 HTTPS）：&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="-1" data-height="-1" src="https://pic.isolitude.cn/2020/05/05/426f585afc94f.png" alt="" /&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在命令行中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone &amp;lt;仓库链接&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若需要输入用户名密码则输入就行。这样仓库就克隆到了本地。&lt;/p&gt;
&lt;h1&gt;上传仓库&lt;/h1&gt;
&lt;p&gt;在仓库中进行修改后，这样提交文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd 到仓库文件夹后

git add .
git commit -m "添加修改"
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样本地的修改就推送到了 GitHub。&lt;/p&gt;
</description><author>1193886304@qq.com (Leo)</author><guid isPermaLink="true">/archives/How-to-use-git-on-a-computer/</guid><pubDate>Sun, 03 May 2020 16:55:00 +0806</pubDate></item><item><title>Markdown基本语法</title><link>/archives/Markdown-basic-syntax/</link><description>&lt;blockquote&gt;&lt;p&gt;什么是Markdown？
Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从WordPress搬到Typecho后发现编辑器相比起WordPress来说的可视化编辑器并不太好用。之后便了解到了Markdown语法，使用Markdown语法打字可以像敲代码一样进行纯文本的打字，并且展示出来排版简单好看，可以说使用起来十分简单方便快捷。&lt;/p&gt;
&lt;p&gt;Markdown语法简单易学，五分钟可以轻易上手，这里来介绍下Markdown的简单语法。&lt;/p&gt;
&lt;h1&gt;Markdown基本语法&lt;/h1&gt;
&lt;h2&gt;一.标题&lt;/h2&gt;
&lt;p&gt;在想要设置为标题的文字前面加#来表示
一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。&lt;/p&gt;
&lt;p&gt;注：标准语法一般在#后跟个空格再写文字，貌似本博客不加空格也行。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 这是一级标题
## 这是二级标题
### 这是三级标题
#### 这是四级标题
##### 这是五级标题
###### 这是六级标题&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;这是一级标题&lt;/h1&gt;
&lt;h2&gt;这是二级标题&lt;/h2&gt;
&lt;h3&gt;这是三级标题&lt;/h3&gt;
&lt;h4&gt;这是四级标题&lt;/h4&gt;
&lt;h5&gt;这是五级标题&lt;/h5&gt;
&lt;h6&gt;这是六级标题&lt;/h6&gt;
&lt;h2&gt;二.字体&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加粗
要加粗的文字左右分别用两个*号包起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;斜体
要倾斜的文字左右分别用一个*号包起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;斜体加粗
要倾斜和加粗的文字左右分别用三个*号包起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除线
要加删除线的文字左右分别用两个~~号包起来&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**这是加粗的文字**
*这是倾斜的文字*`
***这是斜体加粗的文字***
~~这是加删除线的文字~~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这是加粗的文字&lt;/strong&gt;
&lt;em&gt;这是倾斜的文字&lt;/em&gt;`
&lt;strong&gt;&lt;em&gt;这是斜体加粗的文字&lt;/em&gt;&lt;/strong&gt;
&lt;del&gt;这是加删除线的文字&lt;/del&gt;&lt;/p&gt;
&lt;h2&gt;三.引用&lt;/h2&gt;
&lt;p&gt;在引用的文字前加&amp;gt;即可。引用也可以嵌套，如加两个&amp;gt;&amp;gt;三个&amp;gt;&amp;gt;&amp;gt;
n个...
貌似可以一直加下去，但没神马卵用&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;这是引用的内容
&amp;gt;&amp;gt;这是引用的内容
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;这是引用的内容&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;这是引用的内容&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;这是引用的内容&lt;/p&gt;
&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;这是引用的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;四.分割线&lt;/h2&gt;
&lt;p&gt;三个或者三个以上的 - 或者 * 都可以。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
----
***
*****&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：
可以看到，显示效果是一样的。&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2&gt;五.图片&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![图片alt](图片地址 ''图片title'')
图片alt就是显示在图片下面的文字，相当于对图片内容的解释。
图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/
u=702257389,1274025419&amp;amp;fm=27&amp;amp;gp=0.jpg "区块链")&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure&gt;&lt;img data-width="550" data-height="300" src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" /&gt;&lt;figcaption&gt;区块链&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2&gt;六.超链接&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[超链接名](超链接地址 "超链接title")
title可加可不加&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Leo's Blog](https://www.isolitude.cn/)
title可加可不加&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://www.isolitude.cn/"&gt;Leo's Blog&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;七.列表&lt;/h2&gt;
&lt;h3&gt;无序列表&lt;/h3&gt;
&lt;p&gt;语法：
无序列表用 - + * 任何一种都可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 列表内容
+ 列表内容
* 列表内容

注意：- + * 跟内容之间都要有一个空格&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;有序列表&lt;/h3&gt;
&lt;p&gt;语法：
数字加点&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 列表内容
2. 列表内容
3. 列表内容&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：序号跟内容之间要有空格
效果如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;li&gt;列表内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;列表嵌套&lt;/h3&gt;
&lt;p&gt;上一级和下一级之间敲三个空格即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一级无序列表内容&lt;ul&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一级无序列表内容&lt;ol&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;一级有序列表内容&lt;ul&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;li&gt;二级无序列表内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一级有序列表内容&lt;ol&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;li&gt;二级有序列表内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;八.表格&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;表头|表头|表头
---|:--:|---:
内容|内容|内容
内容|内容|内容

第二行分割表头和内容。
- 有一个就行，为了对齐，多加了几个
文字默认居左
-两边加：表示文字居中
-右边加：表示文字居右
注：原生的语法两边都要用 | 包起来。此处省略&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果如下：
表头|表头|表头
---|:--:|---:
内容|内容|内容
内容|内容|内容&lt;/p&gt;
&lt;h2&gt;九.代码&lt;/h2&gt;
&lt;p&gt;语法：
单行代码：代码之间分别用一个反引号包起来&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`代码内容`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码块：
代码之间分别用三个反引号包起来，且两边的反引号单独占一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(```)
  代码...
  代码...
  代码...
(```)&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。&lt;/p&gt;
&lt;/blockquote&gt;
</description><author>1193886304@qq.com (Leo)</author><guid isPermaLink="true">/archives/Markdown-basic-syntax/</guid><pubDate>Tue, 05 May 2020 20:47:00 +0806</pubDate></item><item><title>使 Typecho 支持 emoji 表情</title><link>/archives/Typecho-emoji/</link><description>&lt;p&gt;Typecho默认不支持emoji表情，是由于编码的问题，只需要将默认的数据库编码utf8修改为utf8mb4即可，不过utf8mb4编码在PHP5.5以后才支持。&lt;/p&gt;
&lt;h4&gt;1.修改数据库编码&lt;/h4&gt;
&lt;p&gt;在PhpMyadmin中选择typecho数据库，操作--&amp;gt;排序规则--&amp;gt;选择utf8mb4_unicode_ci然后执行。&lt;/p&gt;
&lt;h4&gt;2.修改表编码&lt;/h4&gt;
&lt;p&gt;执行以下sql语句:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_comments&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_contents&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_fields&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_metas&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_options&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_relationships&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;typecho_users&lt;/span&gt; &lt;span class="k"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;utf8mb4&lt;/span&gt; &lt;span class="k"&gt;collate&lt;/span&gt; &lt;span class="n"&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3.修改typecho配置文件config.inc.php&lt;/h4&gt;
&lt;p&gt;把这一行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;charset&amp;#39;   =&amp;gt;  &amp;#39;utf8&amp;#39;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;charset&amp;#39;   =&amp;gt;  &amp;#39;utf8mb4&amp;#39;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后typecho就可以使用emoji表情了。&lt;/p&gt;
</description><author>1193886304@qq.com (Leo)</author><guid isPermaLink="true">/archives/Typecho-emoji/</guid><pubDate>Fri, 31 Jul 2020 19:47:00 +0806</pubDate></item><item><title>PWA配置教程</title><link>/archives/PWA-configuration-tutorial/</link><description>&lt;h1&gt;一、PWA 简介&lt;/h1&gt;
&lt;p&gt;一个新的前端技术，PWA（ 全称：Progressive Web App ）也就是说这是个渐进式的网页应用程序。
是 Google 在 2015 年提出，2016年6月才推广的项目。是结合了一系列现代Web技术的组合，在网页应用中实现和原生应用相近的用户体验。&lt;/p&gt;
&lt;p&gt;PWA官网：&lt;a href="https://developers.google.com/web/progressive-web-apps/"&gt;https://developers.google.com/web/progressive-web-apps/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1.1 PWA关键技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Service Worker （可以理解为服务工厂）&lt;/li&gt;
&lt;li&gt;Manifest （应用清单）&lt;/li&gt;
&lt;li&gt;Push Notification（推送通知）&lt;/li&gt;
&lt;li&gt;ervice Worker&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.2 浏览器支持：&lt;/h2&gt;
&lt;p&gt;顺便带一句：目前只能在 HTTPS 环境下才能使用SW，因为SW 的权利比较大，能够直接截取和返回用户的请求，所以要考虑一下安全性问题。 
事件机制 功能(还是比较逆天的) 后台数据的同步 从其他域获取资源请求 接受计算密集型数据的更新，多页面共享该数据 客户端编译与依赖管理 后端服务的hook机制 根据URL模式，自定义模板 性能优化 消息推送 定时默认更新 地理围栏&lt;/p&gt;
&lt;h2&gt;1.3 生命周期：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;arsed （解析成功）： 首次注册 SW 时，浏览器解决脚本并获得入口点，如果解析成功，就可以访问到 SW 注册对象，在这一点中我们需要在 HTML 页面中添加一个判断，判断该浏览器是否支持 SW 。&lt;/li&gt;
&lt;li&gt;Installing （正在安装）：SW 脚本解析完成之后，浏览器会尝试进行安装，installing 中 install 事件被执行，如果其中有 event.waitUntil ( ) 方法，则 installing 事件会一直等到该方法中的 Promise 完成之后才会成功，如果 Promise 被拒绝，则安装失败，SW会进入 Redundant（ 废弃 ）状态。&lt;/li&gt;
&lt;li&gt;Installed / Waiting （安装成功/等待中）：如果安装成功，SW 将会进入这个状态。&lt;/li&gt;
&lt;li&gt;Activating （正在激活）：处于 waiting 状态的 SW 发生以下情况，将会进入 activating 状态中：当前已无激活状态的 worker 、 SW脚本中的 self.skipWaiting（）方法被调用 （ ps： self 是 SW 中作用于全局的对象，这个方法根据英文翻译过来也能明白什么意思啦，跳过等待状态 ）、用户已关闭 SW 作用域下的所有页面，从而释放了当前处于激活状态的 worker、超出指定时间，从而释放当前处于激活状态的 worker&lt;/li&gt;
&lt;li&gt;Activated （激活成功）：该状态，其成功接收了 document 全面控制的激活态 worker 。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;edundant （废弃）：这个状态的出现时有原因的，如果 installing 事件失败或者 activating 事件失败或者新的 SW 替换其成为激活态 worker 。installing 事件失败和 activating 事件失败的信息我们可以在 Chrome 浏览器的 DevTools 中查看 一个很不错的全面介绍sw的教程：&lt;a href="https://www.villainhr.com/page/2017/01/08/Service%20Worker%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6"&gt;https://www.villainhr.com/page/2017/01/08/Service%20Worker%20%E5%85%A8%E9%9D%A2%E8%BF%9B%E9%98%B6&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name "你的GitHub用户名"
git config --global user.email "你的GitHub邮箱"
git config --global credential.helper store&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;## 1.4 Manifest
Web App Manifest 是一个 W3C 规范，它定义了一个基于 JSON 的 List 。Manifest 在 PWA 中的作用有：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够将你浏览的网页添加到你的手机屏幕上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在 Android 上能够全屏启动，不显示地址栏 （ 由于 Iphone 手机的浏览器是 Safari ，所以不支持哦）&lt;/li&gt;
&lt;li&gt;控制屏幕 横屏 / 竖屏 展示&lt;/li&gt;
&lt;li&gt;定义启动画面&lt;/li&gt;
&lt;li&gt;可以设置你的应用启动是从主屏幕启动还是从 URL 启动&lt;/li&gt;
&lt;li&gt;可以设置你添加屏幕上的应用程序图标、名字、图标大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.5 Push Notification&lt;/h2&gt;
&lt;p&gt;Push 和 Notification 是两个不同的功能，涉及到两个 API 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notification 是浏览器发出的通知消息。&lt;/li&gt;
&lt;li&gt;Push 和 Notification 的关系，Push：服务器端将更新的信息传递给 SW ，Notification： SW 将更新的信息推送给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;二、PWA 注册&lt;/h1&gt;
&lt;h2&gt;2.1 添加注册事件&lt;/h2&gt;
&lt;p&gt;在网页中添加如下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function () {
        navigator.serviceWorker.register('/sw.js', {scope: '/'})
            .then(function (registration) {
                // 注册成功
                console.log('ServiceWorker registration successful');
            })
            .catch(function (err) {
                // 注册失败:(
                console.log('ServiceWorker registration failed');
            });
    });
}
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2.2 添加 PWA 应用清单信息&lt;/h2&gt;
&lt;p&gt;在网页头部加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel="manifest" href="./manifest.json"&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在同一目录下新建 manifest.json 文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    "name": "应用名称",
    "short_name": "应用名称",
    "display": "standalone",
    "icons": [
        {  "src": "/512.png", "type": "image/png", "sizes": "512x512"  },
        {  "src": "/256.png", "type": "image/png", "sizes": "256x256"  },
        {  "src": "/128.png", "type": "image/png", "sizes": "128x128"  },
        {  "src": "/_64.png", "type": "image/png", "sizes": "64x64"  }
    ],
    "start_url": "/",
    "background_color":"#F9F9F9",
    "theme_color": "#3A3F51"
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：以上信息根据实际情况修改。&lt;/p&gt;
&lt;h1&gt;三、Service Worker 配置&lt;/h1&gt;
&lt;h2&gt;3.1 Service Worker 简单配置参考模板&lt;/h2&gt;
&lt;p&gt;在网页同目录新建 sw.js 文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//缓存空间名称
var CACHE_VERSION = 'sw_v1';
//需缓存的文件
var CACHE_FILES = [
  '/',
  '/aaa.html',
  '/bbb.jpg'
];

//监听安装事件
self.addEventListener('install', function (event) {
  event.waitUntil(
    caches.open(CACHE_VERSION)
    .then(cache =&amp;gt; cache.addAll(CACHE_FILES)
      .then(() =&amp;gt; self.skipWaiting())
    ));
});

//监听激活事件
self.addEventListener('activate', function (event) {
  event.waitUntil(
    caches.keys().then(function (keys) {
      return Promise.all(keys.map(function (key, i) {
        if (key !== CACHE_VERSION) {
          return caches.delete(keys[i]);
        }
      }));
    })
  );
});

//不缓存策略
self.addEventListener('fetch', function(event) {});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：以上为只缓存已定义的文件，不缓存其他。&lt;/p&gt;
&lt;h2&gt;3.2 Service Worker 更多缓存策略&lt;/h2&gt;
&lt;h4&gt;3.2.1 不缓存策略&lt;/h4&gt;
&lt;p&gt;注：其余配置与上文简单配置内容一致，此策略与上文一致。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//不缓存策略
self.addEventListener('fetch', function(event) {});
3.2.2 总是更新策略
注：其余配置与上文简单配置内容一致，仅需将 fetch 事件修改如下。

//总是更新策略
self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.open(CACHE_VERSION).then(function(cache) {
      return fetch(event.request).then(function(response) {
        cache.put(event.request, response.clone());
        return response;
      });
    })
  );
});&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3.2.3 先缓存后更新策略&lt;/h3&gt;
&lt;p&gt;注：其余配置与上文简单配置内容一致，仅需将 fetch 事件修改如下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//先缓存后更新策略
self.addEventListener('fetch', function (event) {
  event.respondWith(
    caches.open(CACHE_VERSION).then(function (cache) {
      return cache.match(event.request).then(function (response) {
        var fetchPromise = fetch(event.request).then(function (networkResponse) {
          cache.put(event.request, networkResponse.clone());
          return networkResponse;
        })
        return response || fetchPromise;
      })
    })
  );
});&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3.2.4 最佳策略&lt;/h3&gt;
&lt;p&gt;这里，我们简单的通过文件类型这个点来进行划分，优先情况是缓存 js/css 文件。这样通过在 FILE_LISTS 添加想要缓存的文件类型即可。之后，我们只要在 message 中更新原来的 document 即可。
注：此策略与上文简单配置配置内容不一致，以下为该策略配置示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//最佳策略
var CURRENT_CACHES = {
  prefetch: 'prefetch-cache-v' + 1,
};
var FILE_LISTS = ['js','css','png'];

var goSaving = function(url){
  for(var file of FILE_LISTS){
    if(url.endsWith(file)) return true;
  }
  return false;
}

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request).then(function(resp) {
      return resp || fetch(event.request).then(function(response) {
          // 检查是否需要缓存
          var url = event.request.url;
          if(!goSaving(url))return response;
          console.log('save file:' + url);
          // 需要缓存,则将资源放到 caches Object 中
          return caches.open(CURRENT_CACHES.prefetch).then(function(cache) {
            console.log('update files like' + event.request.url);
            cache.put(event.request, response.clone());
            return response;
          });
        });
    })
  );
});
self.addEventListener('message',event =&amp;gt;{
  console.log("receive message" + event.data);
  // 更新根目录下的 html 文件。
  var url = event.data;
  console.log("update root file " + url);
  event.waitUntil(
    caches.open(CURRENT_CACHES.prefetch).then(cache=&amp;gt;{
        return fetch(url)
          .then(res=&amp;gt;{
            cache.put(url,res);
          })
    })
  )
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多文档请参阅官方网站。&lt;/p&gt;
</description><author>1193886304@qq.com (Leo)</author><guid isPermaLink="true">/archives/PWA-configuration-tutorial/</guid><pubDate>Sun, 16 Aug 2020 19:45:00 +0806</pubDate></item></channel></rss>